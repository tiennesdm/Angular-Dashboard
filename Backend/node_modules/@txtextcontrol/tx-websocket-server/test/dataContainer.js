'use strict';
const chai = require('chai');
const expect = chai.expect;
const DataContainer = require('../dataContainer.js');
const SampleCommandJSON = '{"CommandID":130,"Param1":0,"Param2":12,"Param3":0,"Data":{"culture":"en-US","uiCulture":"en-US"}}';
const SampleCommandData = [ 162, 0, 0, 0, 1, 0, 0, 0, 34, 56, 0, 0, 0, 0, 0, 0, 123, 34, 78, 97, 109, 101, 34, 58, 34, 67, 104, 97, 114, 116, 84, 101, 109, 112, 108, 97, 116, 101, 84, 121, 112, 101, 34, 44, 34, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 34, 58, 123, 34, 67, 108, 117, 115, 116, 101, 114, 101, 100, 67, 111, 108, 117, 109, 110, 34, 58, 49, 44, 34, 83, 116, 97, 99, 107, 101, 100, 67, 111, 108, 117, 109, 110, 34, 58, 50, 44, 34, 83, 116, 97, 99, 107, 101, 100, 67, 111, 108, 117, 109, 110, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 34, 58, 51, 44, 34, 67, 108, 117, 115, 116, 101, 114, 101, 100, 67, 111, 108, 117, 109, 110, 51, 68, 34, 58, 52, 44, 34, 83, 116, 97, 99, 107, 101, 100, 67, 111, 108, 117, 109, 110, 51, 68, 34, 58, 53, 44, 34, 83, 116, 97, 99, 107, 101, 100, 67, 111, 108, 117, 109, 110, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 51, 68, 34, 58, 54, 44, 34, 67, 111, 108, 117, 109, 110, 51, 68, 34, 58, 55, 44, 34, 76, 105, 110, 101, 34, 58, 56, 44, 34, 76, 105, 110, 101, 87, 105, 116, 104, 77, 97, 114, 107, 101, 114, 115, 34, 58, 57, 44, 34, 76, 105, 110, 101, 51, 68, 34, 58, 49, 48, 44, 34, 80, 105, 101, 34, 58, 49, 49, 44, 34, 80, 105, 101, 51, 68, 34, 58, 49, 50, 44, 34, 68, 111, 117, 103, 104, 110, 117, 116, 34, 58, 49, 51, 44, 34, 67, 108, 117, 115, 116, 101, 114, 101, 100, 66, 97, 114, 34, 58, 49, 52, 44, 34, 83, 116, 97, 99, 107, 101, 100, 66, 97, 114, 34, 58, 49, 53, 44, 34, 83, 116, 97, 99, 107, 101, 100, 66, 97, 114, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 34, 58, 49, 54, 44, 34, 67, 108, 117, 115, 116, 101, 114, 101, 100, 66, 97, 114, 51, 68, 34, 58, 49, 55, 44, 34, 83, 116, 97, 99, 107, 101, 100, 66, 97, 114, 51, 68, 34, 58, 49, 56, 44, 34, 83, 116, 97, 99, 107, 101, 100, 66, 97, 114, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 51, 68, 34, 58, 49, 57, 44, 34, 65, 114, 101, 97, 34, 58, 50, 48, 44, 34, 83, 116, 97, 99, 107, 101, 100, 65, 114, 101, 97, 34, 58, 50, 49, 44, 34, 83, 116, 97, 99, 107, 101, 100, 65, 114, 101, 97, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 34, 58, 50, 50, 44, 34, 65, 114, 101, 97, 51, 68, 34, 58, 50, 51, 44, 34, 83, 116, 97, 99, 107, 101, 100, 65, 114, 101, 97, 51, 68, 34, 58, 50, 52, 44, 34, 83, 116, 97, 99, 107, 101, 100, 65, 114, 101, 97, 49, 48, 48, 80, 101, 114, 99, 101, 110, 116, 51, 68, 34, 58, 50, 53, 44, 34, 83, 99, 97, 116, 116, 101, 114, 34, 58, 50, 54, 44, 34, 83, 99, 97, 116, 116, 101, 114, 87, 105, 116, 104, 83, 109, 111, 111, 116, 104, 76, 105, 110, 101, 115, 65, 110, 100, 77, 97, 114, 107, 101, 114, 115, 34, 58, 50, 55, 44, 34, 83, 99, 97, 116, 116, 101, 114, 87, 105, 116, 104, 83, 109, 111, 111, 116, 104, 76, 105, 110, 101, 115, 34, 58, 50, 56, 44, 34, 83, 99, 97, 116, 116, 101, 114, 87, 105, 116, 104, 83, 116, 114, 97, 105, 103, 104, 116, 76, 105, 110, 101, 115, 65, 110, 100, 77, 97, 114, 107, 101, 114, 115, 34, 58, 50, 57, 44, 34, 83, 99, 97, 116, 116, 101, 114, 87, 105, 116, 104, 83, 116, 114, 97, 105, 103, 104, 116, 76, 105, 110, 101, 115, 34, 58, 51, 48, 44, 34, 66, 117, 98, 98, 108, 101, 34, 58, 51, 49, 44, 34, 66, 117, 98, 98, 108, 101, 51, 68, 34, 58, 51, 50, 44, 34, 72, 105, 103, 104, 76, 111, 119, 67, 108, 111, 115, 101, 34, 58, 51, 51, 44, 34, 79, 112, 101, 110, 72, 105, 103, 104, 76, 111, 119, 67, 108, 111, 115, 101, 34, 58, 51, 52, 44, 34, 82, 97, 100, 97, 114, 34, 58, 51, 53, 44, 34, 82, 97, 100, 97, 114, 87, 105, 116, 104, 77, 97, 114, 107, 101, 114, 115, 34, 58, 51, 54, 44, 34, 70, 105, 108, 108, 101, 100, 82, 97, 100, 97, 114, 34, 58, 51, 55, 125, 125 ];

describe('DataContainer instance creation tests', function () {
   it('creates a data container from a JSON string', function () {
      let container = DataContainer.fromJSON(SampleCommandJSON);
      expect(container).not.to.be.undefined;
      expect(container).not.to.be.null;
      expect(container).to.have.property('commandID');
      expect(container).to.have.property('param1');
      expect(container).to.have.property('param2');
      expect(container).to.have.property('param3');
      expect(container).to.have.property('data');
      expect(container.commandID).to.equal(130);
      expect(container.param1).to.equal(0);
      expect(container.param2).to.equal(12);
      expect(container.param3).to.equal(0);
      let objData = container.dataAsObject;
      expect(objData).not.to.be.undefined;
      expect(objData).not.to.be.null;
      expect(objData).to.have.property('culture');
      expect(objData).to.have.property('uiCulture');
      expect(objData.culture).to.equal('en-US');
      expect(objData.uiCulture).to.equal('en-US');
   });

   it('creates a data container from a byte array', function () {
      let buffer = new Uint8Array(SampleCommandData);
      let container = DataContainer.fromByteArray(buffer);
      expect(container).not.to.be.undefined;
      expect(container).not.to.be.null;
      expect(container).to.have.property('commandID');
      expect(container).to.have.property('param1');
      expect(container).to.have.property('param2');
      expect(container).to.have.property('param3');
      expect(container).to.have.property('data');
      expect(container.commandID).to.equal(162);
      expect(container.param1).to.equal(1);
      expect(container.param2).to.equal(14370);
      expect(container.param3).to.equal(0);
      let objData = container.dataAsObject;
      expect(objData).not.to.be.undefined;
      expect(objData).not.to.be.null;
      expect(objData).to.have.property('Description');
      expect(objData).to.have.property('Name');
      expect(objData.Name).to.equal('ChartTemplateType');
      expect(objData.Description).to.have.property('HighLowClose');
      expect(objData.Description.HighLowClose).to.equal(33);
   });

   it('converts a data container instance to a byte array', function () {      
      let buffer = new Uint8Array(SampleCommandData);
      let container = DataContainer.fromByteArray(buffer);
      expect(container).not.to.be.undefined;
      expect(container).not.to.be.null;
      let converted = container.toByteArray();
      expect(converted).not.to.be.undefined;
      expect(converted).not.to.be.null;
      expect(converted.length).to.equal(buffer.length);
      for (let i = 0; i < converted.length; ++i) { 
         expect(converted[i]).to.equal(buffer[i]); 
      }
   });
});