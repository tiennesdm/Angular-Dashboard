/**
 * @file This file contains utf8-related functions (e. g. conversions from byte array to
 * string and vice versa).
 * @author Thorsten Kummerow <thorsten@textcontrol.com>
 */
'use strict';

/**
 * Converts a byte array containing utf8 data to a string.
 * @param {Uint8Array} array A byte array containing utf8 data.
 * @param {Number} start The 0-based byte index from which to start to convert the incoming data.
 * @returns {String} The converted string.
 */
function arrayToStr(array, start = 0) {
   var result, i, len, c;
   var char2, char3;

   result = '';
   len = array.length;
   i = start;
   while (i < len) {
      c = array[i++];
      // TODO: use if statements and bit masks instead of this switch statement?
      switch (c >> 4) {
         case 0: case 1: case 2: case 3:
         case 4: case 5: case 6: case 7:
            // 0xxxxxxx
            result += String.fromCharCode(c);
            break;

         case 12:
         case 13:
            // 110x xxxx   10xx xxxx
            char2 = array[i++];
            result += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
            break;

         case 14:
            // 1110 xxxx  10xx xxxx  10xx xxxx
            char2 = array[i++];
            char3 = array[i++];
            result += String.fromCharCode(((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
            break;

         default:
            throw new Error(`Unexpected byte '${c}' in utf8 data.`);
      }
   }
   return result;
}

/**
 * Converts a string to a byte array containing utf8 data.
 * @param {String} str A string to convert to a utf8 byte array.
 * @returns {Uint8Array} A byte array containing utf8 data.
 */
function strToArray(str) {
   var result, i, len, c;

   result = [];
   len = str.length;
   for (i = 0; i < len; ++i) {
      c = str.charCodeAt(i);
      if ((c >= 0x01) && (c <= 0x7F)) {
         result.push(c);
      }
      else if (c > 0x07FF) {
         result.push(0xE0 | ((c >> 12) & 0x0F));
         result.push(0x80 | ((c >> 6) & 0x3F));
         result.push(0x80 | ((c >> 0) & 0x3F));
      }
      else {
         result.push(0xC0 | ((c >> 6) & 0x1F));
         result.push(0x80 | ((c >> 0) & 0x3F));
      }
   }
   return new Uint8Array(result);
}

module.exports.arrayToStr = arrayToStr;
module.exports.strToArray = strToArray;
